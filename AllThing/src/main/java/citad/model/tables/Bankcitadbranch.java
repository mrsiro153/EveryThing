/*
 * This file is generated by jOOQ.
*/
package citad.model.tables;


import citad.model.Keys;
import citad.model.Transaction;
import citad.model.tables.records.BankcitadbranchRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bankcitadbranch extends TableImpl<BankcitadbranchRecord> {

    private static final long serialVersionUID = -955928868;

    /**
     * The reference instance of <code>transaction.bankCitadBranch</code>
     */
    public static final Bankcitadbranch BANKCITADBRANCH = new Bankcitadbranch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankcitadbranchRecord> getRecordType() {
        return BankcitadbranchRecord.class;
    }

    /**
     * The column <code>transaction.bankCitadBranch.id</code>.
     */
    public final TableField<BankcitadbranchRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.directBankID</code>.
     */
    public final TableField<BankcitadbranchRecord, String> DIRECTBANKID = createField("directBankID", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.directBankName</code>.
     */
    public final TableField<BankcitadbranchRecord, String> DIRECTBANKNAME = createField("directBankName", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.directBankNameANSI</code>.
     */
    public final TableField<BankcitadbranchRecord, String> DIRECTBANKNAMEANSI = createField("directBankNameANSI", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.indirectBankId</code>.
     */
    public final TableField<BankcitadbranchRecord, String> INDIRECTBANKID = createField("indirectBankId", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.indirectBankName</code>.
     */
    public final TableField<BankcitadbranchRecord, String> INDIRECTBANKNAME = createField("indirectBankName", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.indirectBankNameANSI</code>.
     */
    public final TableField<BankcitadbranchRecord, String> INDIRECTBANKNAMEANSI = createField("indirectBankNameANSI", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.formalName</code>.
     */
    public final TableField<BankcitadbranchRecord, String> FORMALNAME = createField("formalName", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.routeCode</code>.
     */
    public final TableField<BankcitadbranchRecord, String> ROUTECODE = createField("routeCode", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.offsetAcc</code>.
     */
    public final TableField<BankcitadbranchRecord, String> OFFSETACC = createField("offsetAcc", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>transaction.bankCitadBranch.branchType</code>.
     */
    public final TableField<BankcitadbranchRecord, String> BRANCHTYPE = createField("branchType", org.jooq.impl.SQLDataType.VARCHAR.length(16), this, "");

    /**
     * Create a <code>transaction.bankCitadBranch</code> table reference
     */
    public Bankcitadbranch() {
        this("bankCitadBranch", null);
    }

    /**
     * Create an aliased <code>transaction.bankCitadBranch</code> table reference
     */
    public Bankcitadbranch(String alias) {
        this(alias, BANKCITADBRANCH);
    }

    private Bankcitadbranch(String alias, Table<BankcitadbranchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bankcitadbranch(String alias, Table<BankcitadbranchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Transaction.TRANSACTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<BankcitadbranchRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANKCITADBRANCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BankcitadbranchRecord> getPrimaryKey() {
        return Keys.KEY_BANKCITADBRANCH_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BankcitadbranchRecord>> getKeys() {
        return Arrays.<UniqueKey<BankcitadbranchRecord>>asList(Keys.KEY_BANKCITADBRANCH_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Bankcitadbranch as(String alias) {
        return new Bankcitadbranch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bankcitadbranch rename(String name) {
        return new Bankcitadbranch(name, null);
    }
}
