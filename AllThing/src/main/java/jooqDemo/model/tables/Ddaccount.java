/*
 * This file is generated by jOOQ.
*/
package jooqDemo.model.tables;


import jooqDemo.model.Account;
import jooqDemo.model.Keys;
import jooqDemo.model.tables.records.DdaccountRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ddaccount extends TableImpl<DdaccountRecord> {

    private static final long serialVersionUID = 591626092;

    /**
     * The reference instance of <code>account.ddAccount</code>
     */
    public static final Ddaccount DDACCOUNT = new Ddaccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DdaccountRecord> getRecordType() {
        return DdaccountRecord.class;
    }

    /**
     * The column <code>account.ddAccount.id</code>.
     */
    public final TableField<DdaccountRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.accountNumber</code>.
     */
    public final TableField<DdaccountRecord, String> ACCOUNTNUMBER = createField("accountNumber", org.jooq.impl.SQLDataType.VARCHAR.length(63).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.displayAccount</code>.
     */
    public final TableField<DdaccountRecord, String> DISPLAYACCOUNT = createField("displayAccount", org.jooq.impl.SQLDataType.VARCHAR.length(63), this, "");

    /**
     * The column <code>account.ddAccount.accountRefNo</code>.
     */
    public final TableField<DdaccountRecord, String> ACCOUNTREFNO = createField("accountRefNo", org.jooq.impl.SQLDataType.VARCHAR.length(63), this, "");

    /**
     * The column <code>account.ddAccount.accountType</code>.
     */
    public final TableField<DdaccountRecord, String> ACCOUNTTYPE = createField("accountType", org.jooq.impl.SQLDataType.CHAR.length(15).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.cif</code>.
     */
    public final TableField<DdaccountRecord, String> CIF = createField("cif", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.balance</code>.
     */
    public final TableField<DdaccountRecord, BigDecimal> BALANCE = createField("balance", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.preBalance</code>.
     */
    public final TableField<DdaccountRecord, BigDecimal> PREBALANCE = createField("preBalance", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.status</code>.
     */
    public final TableField<DdaccountRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.preStatus</code>.
     */
    public final TableField<DdaccountRecord, Integer> PRESTATUS = createField("preStatus", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.currency</code>.
     */
    public final TableField<DdaccountRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR.length(3).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.openAt</code>.
     */
    public final TableField<DdaccountRecord, Timestamp> OPENAT = createField("openAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.closeAt</code>.
     */
    public final TableField<DdaccountRecord, Timestamp> CLOSEAT = createField("closeAt", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>account.ddAccount.lastUseAt</code>.
     */
    public final TableField<DdaccountRecord, Timestamp> LASTUSEAT = createField("lastUseAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.accruedInterest</code>.
     */
    public final TableField<DdaccountRecord, BigDecimal> ACCRUEDINTEREST = createField("accruedInterest", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.accruedExpenses</code>.
     */
    public final TableField<DdaccountRecord, BigDecimal> ACCRUEDEXPENSES = createField("accruedExpenses", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.accruedInCome</code>.
     */
    public final TableField<DdaccountRecord, BigDecimal> ACCRUEDINCOME = createField("accruedInCome", org.jooq.impl.SQLDataType.DECIMAL.precision(20, 2).nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.createdAt</code>.
     */
    public final TableField<DdaccountRecord, Timestamp> CREATEDAT = createField("createdAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.modifiedAt</code>.
     */
    public final TableField<DdaccountRecord, Timestamp> MODIFIEDAT = createField("modifiedAt", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>account.ddAccount.branchID</code>.
     */
    public final TableField<DdaccountRecord, String> BRANCHID = createField("branchID", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

    /**
     * Create a <code>account.ddAccount</code> table reference
     */
    public Ddaccount() {
        this("ddAccount", null);
    }

    /**
     * Create an aliased <code>account.ddAccount</code> table reference
     */
    public Ddaccount(String alias) {
        this(alias, DDACCOUNT);
    }

    private Ddaccount(String alias, Table<DdaccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ddaccount(String alias, Table<DdaccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Account.ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DdaccountRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DDACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DdaccountRecord> getPrimaryKey() {
        return Keys.KEY_DDACCOUNT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DdaccountRecord>> getKeys() {
        return Arrays.<UniqueKey<DdaccountRecord>>asList(Keys.KEY_DDACCOUNT_PRIMARY, Keys.KEY_DDACCOUNT_DDACCOUNT_ID_UINDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Ddaccount as(String alias) {
        return new Ddaccount(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ddaccount rename(String name) {
        return new Ddaccount(name, null);
    }
}
