/*
 * This file is generated by jOOQ.
*/
package jooqDemo.model.tables;


import jooqDemo.model.Account;
import jooqDemo.model.Keys;
import jooqDemo.model.tables.records.PatternRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pattern extends TableImpl<PatternRecord> {

    private static final long serialVersionUID = -1912984217;

    /**
     * The reference instance of <code>account.pattern</code>
     */
    public static final Pattern PATTERN = new Pattern();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatternRecord> getRecordType() {
        return PatternRecord.class;
    }

    /**
     * The column <code>account.pattern.key</code>.
     */
    public final TableField<PatternRecord, Integer> KEY = createField("key", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>account.pattern.pattern</code>.
     */
    public final TableField<PatternRecord, String> PATTERN_ = createField("pattern", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>account.pattern.description</code>.
     */
    public final TableField<PatternRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>account.pattern</code> table reference
     */
    public Pattern() {
        this("pattern", null);
    }

    /**
     * Create an aliased <code>account.pattern</code> table reference
     */
    public Pattern(String alias) {
        this(alias, PATTERN);
    }

    private Pattern(String alias, Table<PatternRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pattern(String alias, Table<PatternRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Account.ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PatternRecord> getPrimaryKey() {
        return Keys.KEY_PATTERN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PatternRecord>> getKeys() {
        return Arrays.<UniqueKey<PatternRecord>>asList(Keys.KEY_PATTERN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Pattern as(String alias) {
        return new Pattern(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pattern rename(String name) {
        return new Pattern(name, null);
    }
}
