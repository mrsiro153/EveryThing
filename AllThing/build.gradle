group 'Doan Nguyen'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart',
                'Implementation-Version': version,
                "Main-Class": "timerhaha.TimerDemo"
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'io.vertx:vertx-core:3.7.0'
    compile 'io.vertx:vertx-web:3.7.0'
    compile 'io.vertx:vertx-web-client:3.7.0'
    compile 'io.vertx:vertx-rabbitmq-client:3.7.0'
    // https://mvnrepository.com/artifact/io.vertx/vertx-health-check
    compile group: 'io.vertx', name: 'vertx-health-check', version: '3.7.0'
    compile 'io.vertx:vertx-web-api-contract:3.6.2'
    compile 'io.vertx:vertx-mqtt:3.7.0'

    compile group: 'io.vertx', name: 'vertx-tcp-eventbus-bridge', version: '3.7.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.38'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.2'
    compile 'org.jooq:jooq:3.9.1'
    compile 'org.jooq:jooq-codegen:3.9.1'
    compile 'com.google.code.gson:gson:2.8.1'

    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.5.0'

    compile 'org.apache.logging.log4j:log4j-core:2.8.2'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    //
    compile group: 'org.springframework', name: 'spring-web', version: '4.3.10.RELEASE'
    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.1.10'
    //
    compile "com.google.api.grpc:proto-google-common-protos:1.0.0"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'



    //crawler
    compile('edu.uci.ics:crawler4j:4.1') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    compile group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.0.2'
    compile group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.0.2'
    //log4j2 to ela
    compile group: 'org.graylog2.log4j2', name: 'log4j2-gelf', version: '1.3.1'


}
buildscript {
    ext.grpcVersion = '1.14.0'
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'org.jooq:jooq:3.9.1'
        classpath 'org.jooq:jooq-meta:3.9.1'
        classpath 'org.jooq:jooq-codegen:3.9.1'
        classpath 'mysql:mysql-connector-java:5.1.38'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
    }
}

//jooq generate
//task generate(description: 'generate database model')  {
//    def writer = new StringWriter()
//
//    def xml = new groovy.xml.MarkupBuilder(writer)
//            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
//
//        jdbc() {
//            driver('com.mysql.jdbc.Driver')
//            url('jdbc:mysql://192.168.18.49:6600/')
//            user('root')
//            password('intelin')
//            //password('AbCd@1234')
//        }
//        generator() {
//            name 'org.jooq.util.JavaGenerator'
//            database() {
//                schemata() {
//                    schema() {
//                        inputSchema 'mydata'
//                    }
//                }
//            }
//            generate() {
//                fluentSetters true
//            }
//            target() {
//                packageName('jooqDemo.model')
//                directory('src/main/java')
//            }
//        }
//    }
//    org.jooq.util.GenerationTool.generate(
//            javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
//    )
//}
/*jar {
    manifest {
        attributes "Main-Class": "TestClass"
    }
    baseName = 'all-in-one-jar'
    doFirst {
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}*/

//grpc generate
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/main/java/grpcExam/generate"
}
